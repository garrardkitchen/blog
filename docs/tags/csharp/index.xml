<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp on Blog</title>
    <link>http://blog.garrardkitchen.com/tags/csharp/</link>
    <description>Recent content in csharp on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 25 Feb 2024 09:41:08 +0000</lastBuildDate><atom:link href="http://blog.garrardkitchen.com/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.NET Aspire and Redis</title>
      <link>http://blog.garrardkitchen.com/posts/dotnet-aspire-and-redis/</link>
      <pubDate>Sun, 25 Feb 2024 09:41:08 +0000</pubDate>
      
      <guid>http://blog.garrardkitchen.com/posts/dotnet-aspire-and-redis/</guid>
      <description>First look into .NET Aspire I decided to give .NET Aspire a try. I have not yet watched any online tutorials but I did watch its announcement a few months ago. At the time I did think NGTNI. It didn&amp;rsquo;t make much sense to me. Since then, I’ve seen many tweets. So, over the last month or so, I’ve gradually grasped its raison d’être.
Last night, with some time to kill, I asked Copilot to send me some YT links so I could learn more.</description>
    </item>
    
    <item>
      <title>.NET Stack, Heap and Boxing</title>
      <link>http://blog.garrardkitchen.com/posts/dotnet-stack-and-heap/</link>
      <pubDate>Fri, 04 Feb 2022 08:38:16 +0000</pubDate>
      
      <guid>http://blog.garrardkitchen.com/posts/dotnet-stack-and-heap/</guid>
      <description>This week I have been investigating how to reduce memory allocation in a few HTTP APIs. I won&amp;rsquo;t go into any explicit work-related examples here but I will touch on facets relating to this effort.
Let&amp;rsquo;s start off by looking at Reference Types and Value types and how they get allocated into the Heap. I will also touch on concepts such as boxing and GC pressure.
Let me start off with some facts:</description>
    </item>
    
  </channel>
</rss>
