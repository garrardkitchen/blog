<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Blog</title>
    <link>http://blog.garrardkitchen.com/tags/docker/</link>
    <description>Recent content in docker on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 05 Feb 2024 19:26:11 +0000</lastBuildDate><atom:link href="http://blog.garrardkitchen.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The 3rd Wave of Cloud Computing</title>
      <link>http://blog.garrardkitchen.com/posts/the-3rd-wave-of-cloud-computing/</link>
      <pubDate>Mon, 05 Feb 2024 19:26:11 +0000</pubDate>
      
      <guid>http://blog.garrardkitchen.com/posts/the-3rd-wave-of-cloud-computing/</guid>
      <description>That&amp;rsquo;s quite an opening statement, isn&amp;rsquo;t it?
As a reminder, the 1st and 2nd waves were Virtual Machines and Containers, respectively.
Warning, profound statement inboundâ€¦
The Docker cofounder, Solomon Hykes, said this in 2019
&amp;ldquo;If WASM+WASI existed in 2008, we wouldn&amp;rsquo;t have needed to create Docker. That&amp;rsquo;s how important it is. WebAssembly on the server is the future of computing.&amp;rdquo; - QuoteI think we need to let this sink in for a few moments.</description>
    </item>
    
    <item>
      <title>How to Conditionally Include a Nuget Package</title>
      <link>http://blog.garrardkitchen.com/posts/how-to-conditionally-include-a-nuget-package/</link>
      <pubDate>Wed, 21 Sep 2022 20:58:53 +0100</pubDate>
      
      <guid>http://blog.garrardkitchen.com/posts/how-to-conditionally-include-a-nuget-package/</guid>
      <description>The context I have implemented a solution that as it&amp;rsquo;s primary objective iterates through a sequence of HTTP Requests and page interactions. With sequencing through these steps regularly it gives the support team the maximum amount of time to react to an outage. This outage can be isolated to this particular service, or can originate from any of it&amp;rsquo;s downstream dependencies.
To help with the automation of these steps, I&amp;rsquo;m using Selenium and in particular, it&amp;rsquo;s headless browser capability in conjunction with ChromeDriver.</description>
    </item>
    
    <item>
      <title>Npm E401 and CERT_NOT_YET_VALID</title>
      <link>http://blog.garrardkitchen.com/posts/npm-issues-e401-cert_not_yet_valid/</link>
      <pubDate>Tue, 11 Jan 2022 11:47:54 +0000</pubDate>
      
      <guid>http://blog.garrardkitchen.com/posts/npm-issues-e401-cert_not_yet_valid/</guid>
      <description>Today a PR Merge resulted in a GHA failure. Sadly, this is not the only CICD pipeline to fail this year! This particular pipeline builds a NodeJS Image, pushes the image to ACR and deploys the service to a production Docker Swarm (on merge to main).
This was the error:
[3/7] RUN npm install:
#7 1.469 npm ERR! code E401
#7 1.470 npm ERR! Unable to authenticate, need: Bearer authorization_uri=https://login.windows.net/736f9f**-09-49-86**-b******31f407, Basic realm=&amp;ldquo;https://pkgsprodsu3weu.</description>
    </item>
    
    <item>
      <title>Permission Denied While Trying to Connect to the Docker Daemon Socket</title>
      <link>http://blog.garrardkitchen.com/posts/permission-denied-while-trying-to-connect-to-the-docker-daemon-socket/</link>
      <pubDate>Fri, 07 Jan 2022 08:20:20 +0000</pubDate>
      
      <guid>http://blog.garrardkitchen.com/posts/permission-denied-while-trying-to-connect-to-the-docker-daemon-socket/</guid>
      <description>Out of the blue today, my first day back after Christmas break, I got this when running a GH Actions Workflow on one of our Self-Hosted Linux Runners ðŸ˜±:
Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get &amp;ldquo;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/containers/json&#34;: dial unix /var/run/docker.sock: connect: permission deniedWe have several GitHub Self-Hosted Runners running on Linux and Windows O/S that produce, amongst other artefacts, Linux and Windows images.</description>
    </item>
    
    <item>
      <title>Nodejs Container Restart Policy</title>
      <link>http://blog.garrardkitchen.com/posts/nodejs-container-restart-policy/</link>
      <pubDate>Mon, 21 Sep 2020 16:36:35 +0100</pubDate>
      
      <guid>http://blog.garrardkitchen.com/posts/nodejs-container-restart-policy/</guid>
      <description>If by accident to deploy a solution using the Node.js Cluster API and do not fork exited processes then the following docker-compose restart_policy will not help you:
deploy: restart_policy: condition: on-failure If you&amp;rsquo;re using the Cluster API to schedule tasks across your processes, and all forked processes die, then the docker engine will just assume you&amp;rsquo;ve gracefully shutdown.
Take this code for example, you will see that it doesn&amp;rsquo;t fork another process and therefore, at some point it will no longer process any anything:</description>
    </item>
    
  </channel>
</rss>
